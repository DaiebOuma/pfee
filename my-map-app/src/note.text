import React, { useState, useEffect } from "react";
import axios from "axios";
import { MapContainer, TileLayer, Marker, Popup, useMap } from "react-leaflet";
import "leaflet/dist/leaflet.css";
import L from "leaflet";

// Correction des icônes des marqueurs
import iconUrl from "leaflet/dist/images/marker-icon.png";
import iconShadow from "leaflet/dist/images/marker-shadow.png";

const customIcon = new L.Icon({
  iconUrl,
  shadowUrl: iconShadow,
  iconSize: [25, 41],
  iconAnchor: [12, 41],
  popupAnchor: [1, -34],
});

// Coordonnées par défaut (Tunisie vue large)
const defaultPosition = [33.8869, 9.5375];
const defaultZoom = 6;

// Composant pour changer la vue de la carte
function ChangeView({ center, zoom }) {
  const map = useMap();
  map.setView(center, zoom);
  return null;
}

function App() {
  const [query, setQuery] = useState("");
  const [locations, setLocations] = useState([]);
  const [selectedLocation, setSelectedLocation] = useState(null);
  const [userLocation, setUserLocation] = useState(null);
  const [error, setError] = useState(null);
  const [loading, setLoading] = useState(false);

  // 🔥 Déclencher la recherche après une pause (évite trop de requêtes)
  useEffect(() => {
    if (query.length < 3) {
      setLocations([]);
      return;
    }

    const delayDebounceFn = setTimeout(async () => {
      setLoading(true);
      try {
        const { data } = await axios.get("https://nominatim.openstreetmap.org/search", {
          params: { q: query, format: "json", countrycodes: "TN", addressdetails: 1 },
        });
        setLocations(data.slice(0, 5)); // Prendre uniquement les 5 premiers résultats
      } catch (error) {
        console.error("Erreur de recherche :", error);
      }
      setLoading(false);
    }, 500);

    return () => clearTimeout(delayDebounceFn);
  }, [query]);

  // 📍 Fonction pour obtenir la position de l'utilisateur
  const locateUser = () => {
    navigator.geolocation.getCurrentPosition(
      (position) => {
        setUserLocation([position.coords.latitude, position.coords.longitude]);
        setError(null); // Réinitialiser l'erreur en cas de succès
      },
      (err) => {
        console.error("Impossible d'obtenir la localisation", err);
        setError("Impossible d'obtenir votre position. Vérifiez les permissions de géolocalisation.");
        setUserLocation(null); // Réinitialiser la position en cas d'erreur
      }
    );
  };

  // ❌ Réinitialiser la recherche et la carte
  const clearSearch = () => {
    setQuery("");
    setSelectedLocation(null);
    setLocations([]);
  };

  return (
    <div className="App" style={{ textAlign: "center", padding: "20px" }}>
      <h1>📍 Recherche d'adresse en Tunisie</h1>

      {/* ✅ Barre de recherche avec bouton (X) */}
      <div style={{ position: "relative", width: "300px", margin: "auto" }}>
        <input
          type="text"
          value={query}
          onChange={(e) => setQuery(e.target.value)}
          placeholder="🔍 Tapez une adresse..."
          style={{
            width: "100%",
            padding: "10px",
            fontSize: "16px",
            borderRadius: "5px",
            border: "1px solid #ccc",
          }}
        />
        {query && (
          <button
            onClick={clearSearch}
            style={{
              position: "absolute",
              right: "10px",
              top: "50%",
              transform: "translateY(-50%)",
              background: "transparent",
              border: "none",
              cursor: "pointer",
              fontSize: "18px",
              color: "#888",
            }}
          >
            ❌
          </button>
        )}
        {loading && <p style={{ fontSize: "12px", color: "gray" }}>Chargement...</p>}
        {locations.length > 0 && (
          <ul
            style={{
              listStyle: "none",
              padding: 0,
              margin: 0,
              position: "absolute",
              width: "100%",
              background: "#fff",
              boxShadow: "0px 4px 6px rgba(0, 0, 0, 0.1)",
              zIndex: 1000,
              maxHeight: "200px",
              overflowY: "auto",
              borderRadius: "5px",
            }}
          >
            {locations.map((loc, index) => (
              <li
                key={index}
                onClick={() => {
                  setQuery(loc.display_name);
                  setSelectedLocation({ lat: loc.lat, lon: loc.lon, name: loc.display_name });
                  setLocations([]);
                }}
                style={{ padding: "10px", cursor: "pointer", borderBottom: "1px solid #ddd" }}
              >
                <strong>{loc.display_name}</strong>
              </li>
            ))}
          </ul>
        )}
      </div>

      {/* 🔘 Bouton pour se localiser */}
      <button
        onClick={locateUser}
        style={{
          margin: "10px auto",
          display: "block",
          padding: "10px 20px",
          fontSize: "16px",
          cursor: "pointer",
          borderRadius: "5px",
          border: "none",
          background: "#007bff",
          color: "#fff",
          transition: "background 0.3s",
        }}
        onMouseEnter={(e) => (e.target.style.background = "#0056b3")}
        onMouseLeave={(e) => (e.target.style.background = "#007bff")}
      >
        📍 Ma Position
      </button>
      {error && <p style={{ color: "red" }}>{error}</p>}

      {/*  Carte OpenStreetMap plus petite et centrée */}
      <div style={{ display: "flex", justifyContent: "center", marginTop: "20px" }}>
        <MapContainer
          center={selectedLocation ? [selectedLocation.lat, selectedLocation.lon] : defaultPosition}
          zoom={selectedLocation || userLocation ? 13 : defaultZoom}
          style={{
            height: "50vh",
            width: "80%",
            borderRadius: "10px",
            boxShadow: "0 4px 8px rgba(0, 0, 0, 0.2)",
          }}
        >
          <TileLayer url="https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png" />

          {/* Modifier la vue en fonction de la sélection */}
          <ChangeView
            center={selectedLocation ? [selectedLocation.lat, selectedLocation.lon] : userLocation || defaultPosition}
            zoom={selectedLocation || userLocation ? 13 : defaultZoom}
          />

          {/* Ajouter un marqueur pour le lieu sélectionné */}
          {selectedLocation && (
            <Marker position={[selectedLocation.lat, selectedLocation.lon]} icon={customIcon}>
              <Popup>{selectedLocation.name}</Popup>
            </Marker>
          )}

          {/* Ajouter un marqueur pour la position de l'utilisateur */}
          {userLocation && (
            <Marker position={userLocation} icon={customIcon}>
              <Popup>📍 Vous êtes ici</Popup>
            </Marker>
          )}
        </MapContainer>
      </div>
    </div>
  );
}

export default App;